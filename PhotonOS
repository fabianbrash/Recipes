


#####Github source:https://github.com/vmware/photon/blob/master/docs/photon-admin-guide.md

###Start Docker#####################################
systemctl start docker
systemctl enable docker

#######Setup networking##############################
cd /etc/systemd/network
####Copy the existing file and create a new one using the static moniker
cp 10-dhcp-en.network 10-static-en.network

##################Example File#####################################
[Network]
Address=192.168.79.134/24
Gateway=192.168.79.2
DNS=8.8.8.8
Domains=photon.local
#####################################################################
########Add  your IP and remember afterword to rename the DHCP file################
mv 10-dhcp-en.network 10-dhcp-en.network.OLD
####chmod file#########
chmod 644 10-static-en.network

##############Restart network############################################
systemctl restart systemd-networkd

########List network/adapter info########
networkctl
networkctl status eth0

#######Allow root to ssh######################################
vim /etc/ssh/sshd_config (Find in the file PermitRootLogin and change to yes)
systemctl restart sshd


#######FIREWALL#################################
#photonOS uses iptables for it's firewall and it's on by default
systemctl status iptables


##############PHOTONOS PERMISSION ISSUES#############
##Deploying a gitlab container on photonOS I had to chmod 0777 /Data in order for docker to have the rights
###to right to the path


#######VERSION 2.0 CHANGES############################################
##the 99-dhcp file that's generated will regenerate so make certain to set DHCP=no
##also make certain your new file is 10-static... not 99-static...


#####TDNF###########################

tdnf repolist            ##List all repos
tdnf clean all           ##clear all cache
tdnf check-update        ##check for updates
tdnf -y install gcc      ##install/update gcc only
tdnf distro-sync         ##synchronizes the machine's RPMs with the latest version of all the packages in the repository.


###########EXTEND ROOT PARTITION#######################
###Add additional space to the vmdk via GUI
tdnf install -y parted

##Rescan device to see new space withour rebooting
echo 1 > /sys/class/block/sda/device/rescan

fdisk -l ##List all devices
####We are going to be working with /dev/sdb

parted /dev/sdb

##If you get a message about the device not using all the space type "Fix"

print  ###To list the partition we will be extending the filesystem usually '2'

resizepart 2 
Yes
38000 ###here we are making the disk size 38GB
quit

resize2fs /dev/sdb2

df -h

##REF: https://myfabrix.com/community/tech-notes/photonos-expanding-disk-partition/
##REF: https://www.tecmint.com/parted-command-to-create-resize-rescue-linux-disk-partitions/
###Note in the first REF he uses the command 'resizepart 2 100%' that will generate an error


######Photon OS 1.x /root partition full###########

##Ran into an issue today in which our gitlab server running in a docker container using 
##VMware's photonOS 1.x ran our of disk space on the /root partition by default this partition
##is only ~15GB; while the container was still running and I could log into gitlab
##I couldn't clone any repos.  The solution, simply add space to the disk in vCenter
##and boot the Vm into GParted live an extend /dev/sda1 in my case, reboot, and all was good
##Thank goodness for GParted Live
