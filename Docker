

####URLs#################################
https://getcarina.com/docs/tutorials/data-volume-containers/

#################Get an image#################################
docker pull 'image name'

##########Spawn a container from an image#################
docker run 'image name'

###############List all containers###########
docker ps
docker ps -a (List even containers that are not running)

#########List volumes##############
docker volume ls
##########Stop Container##############
docker stop 'container ID or container name'

#######Delete Container###########
docker rm 'container ID or container name' -f(force)
####Delete an image#########
docker rmi 'image name | ID' -f

sudo docker stats

######The rest can be found around the web#############

#####NOW let's do something interesting##########
docker run --name mycontainer --hostname mycontainer.org -d -p 80:80 --restart always --volume /srv/myapp/folderA:/opt/myapp/folderA:Z --volume /srv/myapp/folderB:/opt/myapp/folderB:Z 'image name or image ID'
####What's happing here
#### we are running a container with a friendly name of mycontainer and a hostname of mycontainer.org it's also detached(-d) and we are
mapping port 80 on the host with port 80 on the container we want the container to restart with the host(--restart always) and then
we get to the complex bit and that's how we are going to persist our cotainers storage what we are effectively doing here is using or 
photonOS or whatever linux host you are using as a DVC(Data Volume container) check here:https://getcarina.com/docs/tutorials/data-volume-containers/
what that means is that we are going to use our host as the persistent storage for our container and we are mapping the host
storage to the container storage i.e. /srv/myapp/folderA:/opt/myapp/folderA:Z(the:Z is for SELinux if it's on you need that)
The app venfor will usually list what folders need to be persisted---what this does is allow us to use in my case photonOS as a VM
and then I can backup at the VM level and I will be able to recover lost data...COOL
also we can create a container whose sole purpose is to be a DVC you could do this
docker run --name data -v /opt/splunk/etc -v /opt/splunk/var busybox
the above will create a new container using busybox as the base image and create the above mount points\
now we can do this
docker run --name myapp --volumes-from=data
For me the above is a more complex way of adding persistence to a container I prefer using the vm as the DVC so I just need to backup
the VM.

######Shell into a container
docker exec -it 'containerID or name' /bin/bash
exit to quit


#######LET'S SETUP SOME NETWORKING IN DOCKER#########################
sudo docker create network --driver=bridge br0
sudo docker run -d --name container1 --network=br0 mongo

#####GETTING DOCKER ON CENTOS7.X#########################################
###FIRST REMOVE THE OLD DOCKER IF YOU HAVE IT#####################
sudo yum remove docker docker-common container-selinux docker-selinux docker-engine

sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum makecache fast

sudo yum install -y docker-ce

###########OPTIONAL EDGE BUILDS####################
sudo yum-config-manager --enable docker-ce-edge

###DISABLE EDGE BUILDS#################
sudo yum-config-manager --disable docker-ce-edge

################PLEASE NOTE##################3
#if you installed docker with the below command
sudo yum install docker -y
#####and then you remove it and intalled with the following command
sudo yum install -y docker-ce
###MAKE CERTAIN TO DELETE ALL IMAGES PRIOR AS YOU MIGHT HAVE ISSUES DELETING IMAGES THAT WERE PULLED FROM THE FIRST INSTALL###

###INSTALL INSTRUCTIONS FOR CENTOS#####
#https://docs.docker.com/engine/installation/linux/centos/#install-using-the-repository

#####RPM's are here###############
#https://download.docker.com/linux/centos/7/x86_64/stable/Packages/


######BUILDING YOUR FIRST DOCKER IMAGES##########################
sudo docker build -t firstimage . (the . denotes where your Dockerfile is in this case in the current working directory)


##########SAMPLE DOCKER FILE#####################

FROM php:7.1.3-apache
COPY src/ /var/www/html/
EXPOSE 80


FROM nginx:1.11.13-alpine
COPY /html5up-forty/ /usr/share/nginx/html
EXPOSE 80



######SAMPLE DOCKER COMPOSE FILE################################
######docker-compose.yml#######################################

version: '2'

services:
  web:
    image: nginx:1.12.0-alpine
    ports:
      - "3000:80"

  cache:
    image: redis:3.2.8-alpine
    ports:
      - "6379:6379"
      
######################END CONTENT###########################################################
##Then Run##
sudo docker-compose up -d

##Take down stack###
sudo docker-compose down

########PLEASE NOTE SPACING IS VERY VERY VERY VERY VERY IMPORTANT WITH YML FILES#############

####The above example would launch a stack of 2 services, a nginx web server listening on port 3000 and a cache service that run
####redis on it's standard port of 6379
###Note 'image' and 'ports' must lineup as well as 'volumes' etc...


#####INSTALL DOCKER WINDOWS SERVER 2016#########################
#####Note I installed this on Server 2016 core
###Source: https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-server
##Get a Powershell Prompt
PS> Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
PS> Install-Package -Name docker -ProviderName DockerMsftProvider (Select 'A')
PS> Restart-Computer -Force

###Get Installed Version
PS> Get-Package -Name Docker -ProviderName DockerMsftProvider
##Get Current Version from Repo
PS> Find-Package -Name Docker -ProviderName DockerMsftProvider

###Upgrade Docker##################
PS> Install-Package -Name Docker -ProviderName DockerMsftProvider -Update -Force
PS> Start-Service Docker


######INSTALL DOCKER-COMPOSE WINDOWS####################

####Replace the version with the current version, as of this writing it's 1.13
Invoke-WebRequest "https://github.com/docker/compose/releases/download/1.13.0/docker-compose-Windows-x86_64.exe" -UseBasicParsing -OutFile $Env:ProgramFiles\docker\docker-compose.exe
docker-compose --version
##You should get the version output



####INSTALL DOCKER-COMPOSE LINUX#######################
##You will need to su first
su -
curl -L https://github.com/docker/compose/releases/download/1.13.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
exit su

###If you are on a custom linux flavor like say photonOS you can just do this instead
##got to: https://github.com/docker/compose/releases
curl -O -L https://github.com/docker/compose/releases/download/1.13.0/docker-compose-Linux-x86_64
mv docker-compose-Linux-x86_64 docker-compose
su -
cp docker-compose /usr/local/bin && chmod u+x docker-compose
exit

############DOCKER-COMPOSE WINDOWS#########################
####There are slight differences for the Windows platform

##########BEGIN FILE CONTENT##############################

version: '2.1'

services:
  web:
    image: microsoft/iis
    ports:
      - "3000:80"
networks:
  default:
    external:
      name: nat
      

#####END COMPOSE FILE#####################
####Minimum version here has to be 2.1 because of the version of the client and the version of compose that I have
####Also the biggest change is the addition of the default network, compose can't create networks on windows(as of this writing)
###So we have to use an existing network and set it to the default, here a network called 'nat' was created, so we have to use
###it




################SIMPLE APP STACK, MONGODB BACKEND AND A NODE APP AS THE FRONTEND####################

docker pull mongo:3.4.4

docker run -d --name mymongo mongo:3.4.4

docker pull sdelements/lets-chat

docker run -d --name mylc \
-p 8080:8080 \
-p 5222:5222 \
--link mymongo:mongo \
sdelements/lets-chat

###########END STACK#############################






