#Install RHEl or centos with the Development packages
#If you forgot you can use yum group install

sudo yum upgrade

sudo yum grouplist
sudu yum grouplist hidden

sudo yum groupinstall "GroupPackage Name"

#Install Epel packages
sudo yum install epel-release

#Text graphical config of network after making a change you will need to restart network service
sudo nmtui
sudo systemctl restart network


#List all services
#Centos/RHEL V6.x
sudo service --status-all
sudo service --status-all | less or more
sudo service --status-all | grep ntpd
sudo service docker status

#Centos/RHEL V7.x
sudo systemctl start | stop | enable | mask 'service name'
sudo systemctl list-unit-files
sudo systemd-cgtop
chkconfig --list
chkconfig --list docker
##Enable Service
chkconfig docker on
##Disable service
chkconfig docker off

#Install open-vmtools
sudo yum install open-vm-tools

#Start openvmtools
sudo systemctl start vmtoolsd
sudo systemctl enable vmtoolsd

#Install NPM(which install nodejs) you must first install epel-release
sudo yum install npm

#The default firewall is now firewalld
#If firewalld is not installed
sudo yum install firewalld

#See the state of firewalld
firewall-cmd --state

sudo systemctl start firewalld
sudo systemctl enable firewalld

firewall-cmd --get-default-zone

firewall-cmd --get-active-zones
firewall-cmd --list-all

firewall-cmd --get-zones
firewall-cmd --zone=home --list-all

sudo firewall-cmd --zone=home --change-interface=eth0
#Permanently change zones edit below file and add ZONE=thezone at end of file
sudo nano /etc/sysconfig/network-scripts/ifcfg-eth0
sudo systemctl restart network.service
sudo systemctl restart firewalld.service

#Change default zone
sudo firewall-cmd --set-default-zone=home

#Get All services
firewall-cmd --get-services

#Add a service permanently
sudo firewall-cmd --zone=public --permanent --add-service=http

#Add a port
sudo firewall-cmd --zone=public --permanent --add-port=5000/tcp
sudo firewall-cmd --zone=public --permanent --add-port=4990-4999/udp
#list all permanent ports
sudo firewall-cmd --zone-public permanent --list-ports

#Create your own zones
sudo firewall-cmd --permanent --new-zone=publicweb

##Reload the firewall
sudo firewall-cmd --reload

#Install python packages get pip first
sudo yum install python-pip

#using find command
sudo find
sudo find ./etc -name "hosts"
find ./test -name "abc.txt"
find ./test -name "*.php"

##Fedora has a tool gnome-tweak-tool
dnf install gnome-tweak-tool
##Then from terminal run
gnome-tweak-tool

####GREAT RESOURCE: https://www.server-world.info/en/

####List users on centos/rhel system
cat /etc/passwd


####List users on centos/rhel system
cat /etc/passwd

###Installing Webmin the --no-check-certificate option is necessary if wgt does not trust the cert sourceforge bounces you around######
download .rpm from http://prdownloads.sourceforge.net/webadmin/webmin-1.820-1.noarch.rpm
wget --no-check-certificate http://prdownloads.sourceforge.net/webadmin/webmin-1.820-1.noarch.rpm
###Required Dependency for webmin
sudo yum install perl-Net-SSLeay
*Note is you use yum to install the .rpm file webmin.xxx.rpm it will locate the dependency for you and install it
***If you use RPM to install you will need to install the dependency first

###Webmin runs on port 10000 so you will need to open that up if you are using a firewall


################CHECK RPM PACKAGE UPDATE HISTORY######################################################
sudo rpm -q kernel --last
sudo rpm -q vim --last
sudo rpm -qa --last


#############################DMESG#################################################################
dmesg is used to write kermel messages to standard out
dmesg | less
dmesg | grep -i memory(check system memory)
dmesg | grep -i usb
dmesg | grep -i network
dmesg | grep -i dma(see if hdd isrunning in dma mode)
dmesg | grep -i 10(check for 10G NIC)

#############THE lspci tool can also be used to check all pci bus devices in our system#######################
lspci(ls + pci) if you get command not found you need to install the pciutils package
sudo yum install -y pciutils
lspci
lspci -m
lspci -t
lspci -k(kernel devices)
lspci -s 03:00
######the info returned can then be piped into dmesg to make certain our pci-e devices are registering correctly
ex. VMXNET 3 returned address 03:00 so we can run
dmesg | grep -i 03:00(-i means ignore case)

########ethtool###############################
ethtool eth0 or 'whatever your adapter is'


#####Check RSS################################
egrep 'CPU|eno123xxx' /proc/interrupts


######################ADDING ROOT CA TO RHEL/CENTOS#############################################
##I HAVE NOT TESTED THIS YET
##Export your root CA to .crt if on Windows it'll be exported as .cer you can use openssl to convert or if you exported the file
##as DER not "DER Binary" you can just change the extension
###Then just add the cert on RHEL/CentOS6 to /usr/local/share/ca-certificates on RHEL/CentOS7 to /etc/pki/ca-trust/source/anchor
##Then run update-ca-trust
#####HOPEFULLY I WILL BE ABLE TO TEST THIS SOON.##########



########USING AWK###################################################################
######Basic Format awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse
####Using it like cat
awk '{print}' /etc/fstab
awk '/UUID/' /etc/fstab


######################ENABLE NTP ON CENTOS7#############################################

sudo yum install ntp -y
sudo vim /etc/ntp.conf (You should not have to change anything here or you can add our own timeservers)
sudo systemctl start ntpd
sudo systemctl enable ntpd
#####ADD OUR FIREWALL RULES#########################
sudo firewall-cmd --add-service=ntp --permanent
sudo firewall-cmd --reload

###SEE IF IT'S WORKING
sudo ntpq -p



###################TUNED CONFIG#######################################
##If not installed
sudo yum install tuned

sudo tuned-adm list ##LIST ALL AVAILABLE
sudo tuned-adm profile 'Your new Profile'
sudo tuned-adm recommended

##########################TOP############################################
top -c then presss '1' shows all cpu's


##################IPTABLES#############################################################################
sudo iptables -S
sudo iptables -L
##Let's see our current policy
sudo iptables -L | grep policy
##Let's accept our traffic(this is the defauly behaviour)
sudo iptables --policy INPUT ACCEPT
sudo iptables --policy OUTPUT ACCEPT
sudo iptables --policy FORWARD ACCEPT

#####If you would like to drop all connections except the ones you specify
iptables --policy INPUT DROP
iptables --policy OUTPUT DROP
iptables --policy FORWARD DROP

##Drop connections from a specific IP or Subnet#####
sudo iptables -A INPUT -s 10.10.10.10 -j DROP
sudo iptables -A INPUT -s 10.10.10.0/24 -j DROP
sudo iptables -A INPUT -p tcp --dport ssh -s 10.10.10.10 -j DROP(Block SSH)
iptables -A INPUT -p tcp --dport 22 -s 10.10.10.10 -j DROP


Replace ACCEPT with DROP to block port:
## open port ssh tcp port 22 ##
iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 22 -j ACCEPT
 
## open cups (printing service) udp/tcp port 631 for LAN users ##
iptables -A INPUT -s 192.168.1.0/24 -p udp -m udp --dport 631 -j ACCEPT
iptables -A INPUT -s 192.168.1.0/24 -p tcp -m tcp --dport 631 -j ACCEPT
 
## allow time sync via NTP for lan users (open udp port 123) ##
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p udp --dport 123 -j ACCEPT
 
## open tcp port 25 (smtp) for all ##
iptables -A INPUT -m state --state NEW -p tcp --dport 25 -j ACCEPT
 
# open dns server ports for all ##
iptables -A INPUT -m state --state NEW -p udp --dport 53 -j ACCEPT
iptables -A INPUT -m state --state NEW -p tcp --dport 53 -j ACCEPT
 
## open http/https (Apache) server port to all ##
iptables -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT
 
## open tcp port 110 (pop3) for all ##
iptables -A INPUT -m state --state NEW -p tcp --dport 110 -j ACCEPT
 
## open tcp port 143 (imap) for all ##
iptables -A INPUT -m state --state NEW -p tcp --dport 143 -j ACCEPT
 
## open access to Samba file server for lan users only ##
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 137 -j ACCEPT
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 138 -j ACCEPT
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 139 -j ACCEPT
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 445 -j ACCEPT
 
## open access to proxy server for lan users only ##
iptables -A INPUT -s 192.168.1.0/24 -m state --state NEW -p tcp --dport 3128 -j ACCEPT
 
## open access to mysql server for lan users only ##
iptables -I INPUT -p tcp --dport 3306 -j ACCEPT (Note -I will place this at the top of the file -A does an append to the end of the file)

######IPTABLES TUI#####################
###You can also configure with a TUI(test user interface)
sudo yum search all | grep setup*
sudo yum install -y system-config-firewall-tui

#######################FDISK A NEW DISK################################################################
###########NOTE YOU MIGHT HAVE TO RESCAN YOUR SCSI BUS TO SEE THE NEW DISK#############################
sudo fdisk -l (list all volumes)
sudo fdisk -l /dev/sda1 (just list that volume)
sudo fdisk /dev/sda1
#####press n to create a new partition and follow the prompts################
#####press l to list the hexcodes###########################################
####press t to change partition type#######################################
#####presss w to write changes#################################
sudo mkfs.ext4 /dev/sda1 (lay down our filesystem)
sudo mkdir /Data
sudo mount /dev/sda1 /Data
###EDIT YOUR /ect/fstab file#######
/dev/sda1  /Data  ext4  defaults 0 0 

####If your volume uses LVM this is a bit trickier######
##PVDISPLAY######
sudo pvdisplay (for LVM)
##Also
sudo lsblk
##See if we already have a file system
sudo file -s /dev/sdb1(if this returns 'data' then no file system is present must format disk)
sudo lvdisplay
sudo lvscan



######Create a symbolic link##############
ln -s /var/logs/apache/logs ./logs

###let's find all .conf files inside of /etc
sudo ls -l /etc/*.conf

######################################################################################################################
####Check versions###########
uname -a
cat /etc/redhat-release

####Clean up yum cache####
sudo yum clean all

####Let's see what's installed on our system
sudo rpm -qa | grep node


#############SELinux##################################################
sestatus
sestatus -v
sestatus -b (state of Booleans)
sestatus -b | grep gluster | grep on$ or off$
getenforce(See current execution policy)
sudo setenforce enforcing


##config file location####
/etc/sysconfig/selinux(which is symbolic link to /etc/selinux/config
sudo cat /var/log/messages | grep "SELinux is preventing" 
sudo cat /var/log/messages | grep SELinux 
sudo semodule -l | less (list modules in memory)
sudo ls -l /etc/selinux/targeted/modules/active/modules/
getsebool virt_use_nfs
sudo setsebool virt_use_nfs on

sudo ls -l /etc/*.conf
###now###
sudo ls -Z /etc/*.conf

#####Source:  https://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-2-files-and-processes

#######MAKE SCRIPTS EXECUTABLE####################################################
chmod u+x script.sh(only the current user can run the script)
chmod x script.sh(this is equivalent to chmod a+x all users can run the script)


######################CURL EXAMPLES############################################
sudo yum install curl
curl http://localhost ##Show the output of a page
curl http://localhost > file.html
curl -o file.pdf http://www.localhost/file.pdf
curl -O http://localhost/file.pdf (this will name the file the same as the URL content you are downloading)
curl -O http://localhost/file2.pdf -O http://localhost/file3.pdf

curl -L http://www.google.com (Follow redirects)
curl -C - -O http://localhost/largefile.iso (Continue downloading our large file from where we left off)
curl --limit-rate 1000B -O http://localhost/largefile.ISO (limit-rate of file downloads)
curl -z 21-Jan-17 http://localhost/file.pdf (only download file if modified after the given date)
curl -z -21-Jan-17 http://localhost/file.pdf (only download file if modified before given date)
curl -u ftpuser:ftppass -O ftp://localhost.file.pdf
curl -v http://www.google.com

#####SOURCE:  http://www.thegeekstuff.com/2012/04/curl-examples/?utm_source=feedburner


######SCP################################################
scp -r /directory/ user@192.168.1.1:/directory (recursively copy all data from /directory on the source to /directory on the destination,
if the folder does not exist on dest then it will be created)






