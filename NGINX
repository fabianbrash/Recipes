################USING NGINX AS A LB, REVERSE PROXY, CACHING AND SSL TERMMINATION SERVER###################
cd /etc/nginx
##A couple of important directories here are sites-available and sites-enabled(sites-enabled gets loaded when nginx starts or reloads)
cd /etc/nginx/sites-available
sudo vim app-name

#######BASIC REVERSE PROXY SETTINGS##############################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
}


######END FILE CONTENTS########################################



######CONFIGURING MULTIPLE APPS BY URL REWRITE#################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
         
         location /app1(Your URL would go here) {
          rewrite ^/app1(.*) $1 break;
          proxy_pass "http://127.0.0.1:3001";
          }
          location /app2 {
          rewrite ^/app2(.*) $1 break;
          proxy_pass "http://127.0.0.1:3002";
          }
          
}
####NOTE the above code requires a ULR rewrite because the app is expecting traffic on /, if the app was expecting
#####traffic on /app1 then I don't think the rewrite was would be required, using / is a common practice for Node apps




######CONFIGURING MULTIPLE HOSTNAMES#################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          server_name abc.com www.abc.com *.abc.com;
          location / {
           proxy_pass http://127.0.0.1:3000;
           }
             
}

server {
          listen 80;
          server_name def.com www.def.com;
          location / {
           proxy_pass http://127.0.0.1:3001;
           //Let's send some data back to our backend nodes remember nginx is only doing reverse proxy here it's not your web server
           proxy_set_header     x-real-IP           $remote_addr;
           proxy_set_header     x-forwarded-for     $proxy_add_x_forwarded_for;
           proxy_set_header     host                $host;
           }
}


######END FILE CONTENTS########################################

sudo ln -s /etc/nginx/sites-available/app-name /etc/nginx/sites-enabled/node-app
sudo systemctl reload nginx


##########REVERSE PROXY WITH SSL###################################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          server_name *.abc.com;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
}

server {
          listen 443;
          server_name *.abc.com;
          ssl_certificate       /etc/nginx/certs/cert.crt;
          ssl_certificate_key   /etc/nginx/certs/cert.key;
          ssl on;
          ssl_protocols TLSv1 TLSv1.1 TLSV1.2;
          location / {
            proxy_pass https://127.0.0.1:3001;
           //Let's send some data back to our backend nodes remember nginx is only doing reverse proxy here it's not your web server
           proxy_set_header     x-real-IP           $remote_addr;
           proxy_set_header     x-forwarded-for     $proxy_add_x_forwarded_for;
           proxy_set_header     host                $host;
           }
}


######END FILE CONTENTS########################################


#######LOAD BALANCER#######################################
####TYPES OF LB#########
round-robin
   default

least-connected
  least_conn;

ip-hash
ip_hash; (used for sticky sessions)

upstream backend_nodes {
              server 192.168.1.5;
              server 192.168.1.6;
              server 192.168.1.7;
}


server {
          listen 80;
          
          location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://backend_nodes;
            }
 }
 
 
 
            
            
