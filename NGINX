################USING NGINX AS A LB, REVERSE PROXY, CACHING AND SSL TERMINATION SERVER###################
cd /etc/nginx
##A couple of important directories here are sites-available and sites-enabled(sites-enabled gets loaded 
##when nginx starts or reloads)
cd /etc/nginx/sites-available
sudo vim app-name

#######BASIC REVERSE PROXY SETTINGS##############################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
}


######END FILE CONTENTS########################################



######CONFIGURING MULTIPLE APPS BY URL REWRITE#################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
         
         location /app1(Your URL would go here) {
          rewrite ^/app1(.*) $1 break;
          proxy_pass "http://127.0.0.1:3001";
          }
          location /app2 {
          rewrite ^/app2(.*) $1 break;
          proxy_pass "http://127.0.0.1:3002";
          }
          
}
####NOTE the above code requires a ULR rewrite because the app is expecting traffic on /, if the app was expecting
#####traffic on /app1 then I don't think the rewrite was would be required, using / is a common practice for Node apps




######CONFIGURING MULTIPLE HOSTNAMES#################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          server_name abc.com www.abc.com *.abc.com;
          location / {
           proxy_pass http://127.0.0.1:3000;
           }
             
}

server {
          listen 80;
          server_name def.com www.def.com;
          location / {
           proxy_pass http://127.0.0.1:3001;
           //Let's send some data back to our backend nodes remember nginx is only doing reverse proxy here it's not your web server
           proxy_set_header     x-real-IP           $remote_addr;
           proxy_set_header     x-forwarded-for     $proxy_add_x_forwarded_for;
           proxy_set_header     host                $host;
           }
}


######END FILE CONTENTS########################################

sudo ln -s /etc/nginx/sites-available/app-name /etc/nginx/sites-enabled/node-app
sudo systemctl reload nginx


##########REVERSE PROXY WITH SSL###################################
#########CONTENTS OF app-name file##########################
server {
          listen 80;
          server_name *.abc.com;
          location / {
           proxy_pass "http://127.0.0.1:3000"
         }
}

server {
          listen 443;
          server_name *.abc.com;
          ssl_certificate       /etc/nginx/certs/cert.crt;
          ssl_certificate_key   /etc/nginx/certs/cert.key;
          ssl on;
          ssl_protocols TLSv1 TLSv1.1 TLSV1.2;
          location / {
            proxy_pass https://127.0.0.1:3001;
           //Let's send some data back to our backend nodes remember nginx is only doing reverse proxy here it's not your web server
           proxy_set_header     x-real-IP           $remote_addr;
           proxy_set_header     x-forwarded-for     $proxy_add_x_forwarded_for;
           proxy_set_header     host                $host;
           }
}


######END FILE CONTENTS########################################


#######LOAD BALANCER#######################################
####TYPES OF LB#########
round-robin
   default

least-connected
  least_conn;

ip-hash
ip_hash; (used for sticky sessions)

upstream backend_nodes {
              ip_hash; /make connections sticky
              server 192.168.1.5;
              server 192.168.1.6;
              server 192.168.1.7;
}


server {
          listen 80;
          
          location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; (send the IP of the client to the backend nodes)
            proxy_pass http://backend_nodes;
            }
 }
 
 
 
            
           
############BASIC NGINX SETUP TO SERVE AN API THIS CASE JUST A .json file#####################
####Server used ubuntu should be pretty similar on centos#####################

sudo apt install -y nginx
cat /etc/nginx/mime.types | grep -i json  ##make certain this is defined
cd sites-available
sudo cp default api
sudo mv default default.ORIGINAL
cd /etc/nginx/sites-enabled
sudo ln -s /etc/nginx/site-available/api api

cd /var/www/html
sudo mkdir api  ##copy your .json file here



#####Start File 'api'#############################

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html/api;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php7.0-cgi alone:
        #       fastcgi_pass 127.0.0.1:9000;
        #       # With php7.0-fpm:
        #       fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}



###############END FILE########################



###You can also add a new disk to your VM partition and format it and mount it and server your web data from
###that mount point




############CENTOS7/RHEL7###############################################
###REF:https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-on-centos-7

###After installing nginx from epel-release you might have to create both the sites-available and sites-enabled folders##
cd /etc/nginx

sudo mkdir sites-available
sudo mkdir sites-enabled

sudo vim nginx.conf

##Add the below to the end of the http{} directive
include /etc/nginx/sites-enabled/*.conf;
server_names_hash_bucket_size 64; #REF:http://nginx.org/en/docs/http/server_names.html

##Note because of the above config your config files in /etc/nginx/sites-available must end with .conf
##Then create a .conf file and symlink it in /etc/nginx/sites-enabled
##Note a simple conf file to serve up a sailsjs api would look like this

#######Contents of api.conf############
###I'm no expert here but maybe I don't need the 1337 in the proxy_pass directive, but hell it works so who cares####

server {
         listen 1337;
         location / {
           proxy_pass "http://127.0.0.1:1337"
         }
}

#####End file contents#######


###Then as I said symlink that conf file and make certain to reload nginx and open that port in your firewall###
sudo firewall-cmd --zone=public --permanent --add-port=1337/tcp 
sudo firewall-cmd --reload



###########CENTOS7#############################
##In order to setup nginx as a reverse proxy make certain you've allowed the appropriate ports in firewalld as well
##As make certain SELinux IS IN Permissive mode as this will prevent RP from working, I will need to 
###firgure out how to get this to work with SELinux on
sudo setenforce Permissive
sestatus

############NOTE: During reboot this will change back##############
cd /etc/selinux ##On centos check your linux flavor
vi config ##and change the default to permissive


#########ALSO I SET MY RP CONFIG IN TEH MAIN nginx.conf file in CENTOS7 I will have to figure out
#######How to create my own file as when you install nginx from upstream in Cent7 sites-available and sites-enabled
###Folders are not present and I had to create them manually



#####NGINX TLS termination#################################################
##These instructions are for centos 7.4+ Debian/Ubuntu could be different
##REF: https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-tcp/
##look @ /etc/nginx.conf
sudo mkdir /etc/pki/nginx
sudo mkdir -p /etc/pki/nginx/private
cp public.crt /etc/pki/nginx
cp private.key /etc/pki/nginx/private

###You would think you would need to chown the above pki/nginx to the nginx user but you don't


# Settings for a TLS enabled server.
#
    server {
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        ssl_certificate "/etc/pki/nginx/public.crt";
        ssl_certificate_key "/etc/pki/nginx/private/private.key";
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
           proxy_pass http://127.0.0.1:1337;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
    
    
  ##Making the above changes to your /etc/nginx.conf should do the trick
  
  sudo firewall-cmd --add-service=https --permanent
  sudo firewall-cmd --reload
  
  ##That should be it
