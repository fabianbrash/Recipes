############################HOW TO SIGN A POWERSHELL SCRIPT##############################################
#Launch Powershell and CD to
cd Cert:\CurrentUser\My
##The above will have all of your personal certificates(Note a Code Signing certificate is a user cert not a machine cert)
$cert=Get-ChildItem -Path Cert:\Currentuser\My -CodeSigningCert
Set-AuthenicationcodeSignature 'path to your code' -cert $cert
#################IF YOU ARE AD INTEGRATED AND HAVE A CA OPERATIONAL YOU CAN USE THE BUILT IN CODESIGNING TEMPLATE TO DO THIS#########
################ALSO IF YOU ARE AN AD ENVIRONMENT YOU CAN USE GROUP POLICY TO PUSH THE CERTIFICATE TO ALL YOUR USERS' "TRUSTED PUBLISHERS CERTIFICATE STORE"



***NOTE SIGN YOUR CODE ONCE YOU'VE TESTED THAT EVERYTHING IS OKAY, BECAUSE IF YOU MAKE A CHANGE YOU WILL NEED TO SIGN IT AGAIN.




################################CREATE A PS PROFILE#####################################
##Check if 1 exists
Test-Path $profile
##returns False if you don't have a profile
###Create one
New-Item -path $profile -type file -force


#########GET ALL INSTALLED APPS X64##################

Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table –AutoSize
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table –AutoSize > C:\installedApps.txt



####Get Drive information#########################################

Get-PSDrive C
#OR
Get-PSDrive c | Select-Object Used, Free (Just not as pretty)

Get-Disk #get the disks
Get-Partition #get all partitions
Get-Volume #get all volumes
Get-Volume | format-table Size, SizeRemaining ##Just show the size and the size remaining

###Clean a disk
Clear-Disk 1 ##Clear disk 1

Initialize-Disk -Number 1 ##Initialize Disk 1
New-Partition -DiskNumber 1 -UseMaximumSize -DriveLetter E ##Create a new partition
Format-Volume -DriveLetter E -FileSystem NTFS  ##Lay down our filesystem

##Resize a Disk
Resize-Partition -DiskNumber 1 -PartitionNumber 1 -Size 20GB ##Not Tested


#####GET WINDOWS PRODUCT KEY#################################

(Get-WmiObject -query 'select * from SoftwareLicensingService').OA3xOriginalProductKey


#######Expire AD user password not tested#####################
$name = 'jdoe'
Get-ADUser -Identity $name | Set-ADUser -ChangePasswordAtLogon:$true 


################LOAD A POWERSHELL FUNCTION#############################
. .\function.ps1 ##note the space after the first dot


####ENABLE OR DISABLED A DEVICE#############################3
Enable-PnPDevice -InstanceID 'ID' -Confirm:$false ##don't get prompted for confirmation
Disable-PnpDevice -InstanceID 'ID'

Get-PnPDevice -FriendlyName 'HID*' | fl  ##This is how you can get the instance ID


####So I had interesting thing I had to do and I needed to get the value of an object

$obj = Get-PnPDevice -FriendlyName 'HID-compliant touch screen' | Select InstanceID

###The above code will get the instanceid but it gets the entire object, I just wanted the value so

$obj = Get-PnPDevice -FriendlyName 'HID-compliant touch screen' | Select -ExpandProperty InstanceID

###As simple as that in a way I wish there was a .value property on all objects then I could just use that
###But someone a lot smarter than myself can explain why that would be a bad idea


#######Set-PowerCLIConfiguration######################
Get-PowerCLIConfiguration ##Let's see what's configured first
Set-PowerCLIConfiguration -DefaultVIServerMode Multiple ##Now set it(Multiple,Single)


#####Ways of assigning values to a hash table#############
##REF: https://code.vmware.com/forums/2530/vsphere-powercli#584008

$hs = @{}
$hs.'Name' = "Name"
$hs.'datastore' = 
 
 try {
   ##Do something here
 }
 catch {
   ##Some error
 }
 
 $hs.'data' = 
 
   $anotherHash=@{}
   $anotherHash.'moredata' = "blah"
   $anotherHash.'whatever' = $someVar
   
 @hs
 
 
 ####Install chocolatey
 
 Get-PackageProvider -Name chocolatey
 
 ##Now Let's install an app
 
 Install-Package Openssl.Light
 
 ##For this app run the .batch file located in C:\chocolatey\bin\Win64OpenSSL_Light-1_1_1.bat
 
 ##Follow the prompts note if you install to default location it will install to C:\Program Files\OpenSSL-Win64 if
 ##You choose the second option it will install to C:\OpenSSL-Win64
 
 ###Where ever you installed it cd into the bin directory and you can create certs, see man openssl recipes or 
 ##I just learned you can hash passwords with
 
 openssl passwd -1 "MyPassword"
 
 ##I Will have to do a follow up on installing more apps with chocolatey which is a package manager for Windows
 ##Think apt-get or yum
 
 ###Get SMB Mapping info#########
 ##REF:https://docs.microsoft.com/en-us/powershell/module/smbshare/get-smbmapping?view=win10-ps
 
 Get-SmbMapping
 
 ##More useful##
 
 Get-SmbMapping | Export-Csv -Path C:\mapping.csv
 
##also run the below command to see the PSModulePath

$env:PSModulePath



#####Invoke-Command with outside variables####################
##So I ran into this using variables and Invoke-Command ex.
##REF:https://www.pdq.com/blog/invoke-command-and-remote-variables/

$Var = @("1","2","3")
$Size = $Var.Length

Invoke-Command -ComputerName "pc1" -ScriptBlock {$Size}

###The above will print nothing becuase it can't see the variable
###The fix is this


##Powershell 3.x and above
$Var = @("1","2","3")
$Size = $Var.Length

Invoke-Command -ComputerName "pc1" -ScriptBlock {$Using:Size}


##Powershell 2.x

$Var = @("1","2","3")
$Size = $Var.Length

Invoke-Command -ComputerName "pc1" -ArgumentList $Size -ScriptBlock {
Param( $LocalVariable )
$LocalVariable

}



